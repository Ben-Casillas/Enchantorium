AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  EnchantoriumSAM

  Sample SAM Template for EnchantoriumSAM

Globals:
  Function:
    Timeout: 3
    MemorySize: 128

  Api:
    Cors:
      AllowMethods: "'GET,POST,DELETE,PUT,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"

Resources:
  MailingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: MailingQueue

  # SQS Consumer Lambda Function
  SQSConsumer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/message_queue/sqs_consumer/
      Handler: app.lambda_handler
      Runtime: python3.12
      Events:
        MailingQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt MailingQueue.Arn
            BatchSize: 10

  SQSProducer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/message_queue/sqs_producer/
      Handler: app.lambda_handler
      Runtime: python3.12
      Events:
        InvokeFunction:
          Type: Api
          Properties:
            Path: /invoke
            Method: post
      Role: !GetAtt SQSProducerRole.Arn

  # User Lambda Functions
  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/user/post_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Users
      Architectures:
        - x86_64
      Events:
        CreateUser:
          Type: Api
          Properties:
            Path: /user
            Method: post

  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/user/get_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Users
      Architectures:
        - x86_64
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /user
            Method: get

  GetUserFunctionWithId:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/user/get_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Users
      Architectures:
        - x86_64
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /user/{ID}
            Method: get

  PutUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/user/put_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Users
      Architectures:
        - x86_64
      Events:
        PutPerson:
          Type: Api
          Properties:
            Path: /user
            Method: put

  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/user/delete_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Users
      Architectures:
        - x86_64
      Events:
        DeleteUser:
          Type: Api
          Properties:
            Path: /user/{ID}
            Method: delete

  # Creature Lambda Functions
  CreateCreatureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/creature/post_creature/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Creatures
      Architectures:
        - x86_64
      Events:
        CreateCreature:
          Type: Api
          Properties:
            Path: /creature
            Method: post

  GetCreatureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/creature/get_creature/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Creatures
      Architectures:
        - x86_64
      Events:
        GetCreature:
          Type: Api
          Properties:
            Path: /creature
            Method: get

  GetCreatureFunctionWithId:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/creature/get_creature/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Creatures
      Architectures:
        - x86_64
      Events:
        GetCreature:
          Type: Api
          Properties:
            Path: /creature/{ID}
            Method: get

  PutCreatureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/creature/put_creature/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
      - AmazonDynamoDBFullAccess
      - DynamoDBCrudPolicy:
          TableName: 
            Enchantorium_Creatures
      Architectures:
        - x86_64
      Events:
        PutCreature:
          Type: Api
          Properties:
            Path: /creature
            Method: put

  DeleteCreatureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/creature/delete_creature/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Creatures
      Architectures:
        - x86_64
      Events:
        CreatePerson:
          Type: Api
          Properties:
            Path: /creature/{ID}
            Method: delete

  # Weapon Lambda Functions
  CreateWeaponFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/weapon/post_weapon/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Weapons
      Architectures:
        - x86_64
      Events:
        CreateWeapon:
          Type: Api
          Properties:
            Path: /weapon
            Method: post

  GetWeaponFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/weapon/get_weapon/
      Handler: app.lambda_handler
      Runtime: python3.12
      # Role: !GetAtt LambdaExecutionRole.Arn 
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Weapons
      Architectures:
        - x86_64
      Events:
        GetWeapon:
          Type: Api
          Properties:
            Path: /weapon
            Method: get

  GetWeaponFunctionWithID:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/weapon/get_weapon/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Weapons
      Architectures:
        - x86_64
      Events:
        GetWeapon:
          Type: Api
          Properties:
            Path: /weapon/{ID}
            Method: get

  PutWeaponFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/weapon/put_weapon/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Weapons
      Architectures:
        - x86_64
      Events:
        PutWeapon:
          Type: Api
          Properties:
            Path: /weapon
            Method: put

  DeleteWeaponFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/weapon/delete_weapon/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: Enchantorium_Weapons
      Architectures:
        - x86_64
      Events:
        DeleteWeapon:
          Type: Api
          Properties:
            Path: /weapon/{ID}
            Method: delete

  EnchantoriumGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Test
      DefinitionBody:
        swagger: "2.0"
        info:
          title: EnchantoriumAPI
          version: "1.0"
        paths:
          /user:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateUserFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
              responses: {}
            get:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "GET"
                type: "aws_proxy"
              responses: {}
            put:
              x-amazon-apigateway-integration:
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutUserFunction.Arn}/invocations"
                  passthroughBehavior: "when_no_match"
                  httpMethod: "PUT"
                  type: "aws_proxy"
              responses: {}
          /user/{id}:
            delete:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteUserFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "DELETE"
                type: "aws_proxy"
              responses: {}
          /creature:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateCreatureFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
              responses: {}
            get:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCreatureFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "GET"
                type: "aws_proxy"
              responses: {}
            put:
              x-amazon-apigateway-integration:
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutCreatureFunction.Arn}/invocations"
                  passthroughBehavior: "when_no_match"
                  httpMethod: "PUT"
                  type: "aws_proxy"
              responses: {}
          /creature/{id}:
            delete:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteCreatureFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "DELETE"
                type: "aws_proxy"
              responses: {}
          /weapon:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateWeaponFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
              responses: {}
            get:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetWeaponFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "GET"
                type: "aws_proxy"
              responses: {}
            put:
              x-amazon-apigateway-integration:
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutWeaponFunction.Arn}/invocations"
                  passthroughBehavior: "when_no_match"
                  httpMethod: "PUT"
                  type: "aws_proxy"
              responses: {}
          /weapon/{id}:
            delete:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteWeaponFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "DELETE"
                type: "aws_proxy"
              responses: {}

  SQSProducerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SQSProducerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: !GetAtt MailingQueue.Arn

#aws cloudformation update-stack --stack-name EnchantoriumSAM --template-body "C:\Users\bcasillas\OneDrive - Neumont College of Computer Science\Third Year\Cloud\Enchantorium\EnchantoriumSAM\template.yaml" --capabilities CAPABILITY_NAMED_IAM
