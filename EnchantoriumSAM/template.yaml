AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  EnchantoriumSAM

  Sample SAM Template for EnchantoriumSAM

Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Resources:
  # Define Message Queue
  MailingQueue:
    Type: AWS::SQS::Queue

  # Single API Gateway
  EnchantoriumApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "Enchantorium API"
        paths:
          /user:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateUserFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            get:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "GET"
                type: "aws_proxy"
            put:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutUserFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "PUT"
                type: "aws_proxy"
            delete:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteUserFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "delete"
                type: "aws_proxy"
          /creature:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateCreatureFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            get:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCreatureFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "GET"
                type: "aws_proxy"
            put:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutCreatureFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "PUT"
                type: "aws_proxy"
            delete:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteCreatureFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "delete"
                type: "aws_proxy"
          /weapon:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateWeaponFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            get:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetWeaponFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "GET"
                type: "aws_proxy"
            put:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutWeaponFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "PUT"
                type: "aws_proxy"
            delete:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteWeaponFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "delete"
                type: "aws_proxy"

  # User Lambda Functions
  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/user/post_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Enchantorium_Users

  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/user/get_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Enchantorium_Users

  PutUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/user/put_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Enchantorium_Users

  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/user/delete_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Enchantorium_Users

  # Creature Lambda Functions
  CreateCreatureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/creature/post_creature/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Enchantorium_Creatures

  GetCreatureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/creature/get_creature/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Enchantorium_Creatures

  PutCreatureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/creature/put_creature/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Enchantorium_Creatures

  DeleteCreatureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/creature/delete_creature/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Enchantorium_Creatures

  # Weapon Lambda Functions
  CreateWeaponFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/weapon/post_weapon/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Enchantorium_Weapons

  GetWeaponFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/weapon/get_weapon/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Enchantorium_Weapons

  PutWeaponFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/weapon/put_weapon/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Enchantorium_Weapons

  DeleteWeaponFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/weapon/delete_weapon/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Enchantorium_Weapons
