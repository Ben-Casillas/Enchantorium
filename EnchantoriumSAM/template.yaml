AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  EnchantoriumSAM

  Sample SAM Template for EnchantoriumSAM

Globals:
  Function:
    Timeout: 3
    MemorySize: 128

  Api:
    Cors:
      AllowMethods: "'GET,POST,DELETE,PUT,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"

Resources:
  # Define Message Queue
  MailingQueue:
    Type: AWS::SQS::Queue

  # User Lambda Functions
  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/user/post_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Users
      Architectures:
        - x86_64
      Events:
        CreateUser:
          Type: Api
          Properties:
            Path: /user
            Method: post

  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/user/get_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Users
      Architectures:
        - x86_64
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /user
            Method: get

  GetUserFunctioWithId:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/user/get_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Users
      Architectures:
        - x86_64
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /user/{ID}
            Method: get

  PutUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/user/put_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Users
      Architectures:
        - x86_64
      Events:
        PutPerson:
          Type: Api
          Properties:
            Path: /user
            Method: put

  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/user/delete_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Users
      Architectures:
        - x86_64
      Events:
        DeleteUser:
          Type: Api
          Properties:
            Path: /user/{ID}
            Method: delete

  # Creature Lambda Functions
  CreateCreatureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/creature/post_creature/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Creatures
      Architectures:
        - x86_64
      Events:
        CreateCreature:
          Type: Api
          Properties:
            Path: /creature
            Method: post

  GetCreatureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/creature/get_creature/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Creatures
      Architectures:
        - x86_64
      Events:
        GetCreature:
          Type: Api
          Properties:
            Path: /creature
            Method: get

  GetCreatureFunctionWithId:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/creature/get_creature/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Creatures
      Architectures:
        - x86_64
      Events:
        GetCreature:
          Type: Api
          Properties:
            Path: /creature/{ID}
            Method: get

  PutCreatureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/creature/put_creature/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
      - AmazonDynamoDBFullAccess
      - DynamoDBCrudPolicy:
          TableName: 
            Enchantorium_Creatures
      Architectures:
        - x86_64
      Events:
        PutCreature:
          Type: Api
          Properties:
            Path: /creature
            Method: put

  DeleteCreatureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/creature/delete_creature/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Creatures
      Architectures:
        - x86_64
      Events:
        CreatePerson:
          Type: Api
          Properties:
            Path: /creature/{ID}
            Method: delete

  # Weapon Lambda Functions
  CreateWeaponFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/weapon/post_weapon/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Weapons
      Architectures:
        - x86_64
      Events:
        CreateWeapon:
          Type: Api
          Properties:
            Path: /weapon
            Method: post

  GetWeaponFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/weapon/get_weapon/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Weapons
      Architectures:
        - x86_64
      Events:
        GetWeapon:
          Type: Api
          Properties:
            Path: /weapon
            Method: get

  GetWeaponFunctionWithID:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/weapon/get_weapon/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Weapons
      Architectures:
        - x86_64
      Events:
        GetWeapon:
          Type: Api
          Properties:
            Path: /weapon/{ID}
            Method: get

  PutWeaponFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/weapon/put_weapon/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: 
              Enchantorium_Weapons
      Architectures:
        - x86_64
      Events:
        PutWeapon:
          Type: Api
          Properties:
            Path: /weapon
            Method: put

  DeleteWeaponFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Enchantorium_v1/weapon/delete_weapon/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: Enchantorium_Weapons
      Architectures:
        - x86_64
      Events:
        DeleteWeapon:
          Type: Api
          Properties:
            Path: /weapon/{ID}
            Method: delete